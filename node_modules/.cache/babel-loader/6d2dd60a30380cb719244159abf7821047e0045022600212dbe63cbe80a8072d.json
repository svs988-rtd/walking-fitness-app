{"ast":null,"code":"var _jsxFileName = \"/Users/stevegreen/code/walking-fitness-app/src/components/WalkingMap.tsx\";\nimport React from 'react';\nimport { MapContainer, TileLayer, Polyline, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\n// Fix for default markers in react-leaflet\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png'\n});\nconst WalkingMap = ({\n  sessions,\n  currentTrack,\n  isTracking\n}) => {\n  // Find all GPS tracks\n  const allTracks = sessions.filter(session => session.gpsTrack && session.gpsTrack.length > 0);\n\n  // Calculate map center and zoom\n  const allCoordinates = [...currentTrack, ...allTracks.flatMap(session => session.gpsTrack || [])];\n\n  // Calculate center - use GPS data if available, otherwise default location\n  let center = [37.7749, -122.4194]; // Default to San Francisco\n\n  if (allCoordinates.length > 0) {\n    const latitudes = allCoordinates.map(coord => coord.lat);\n    const longitudes = allCoordinates.map(coord => coord.lng);\n    center = [(Math.max(...latitudes) + Math.min(...latitudes)) / 2, (Math.max(...longitudes) + Math.min(...longitudes)) / 2];\n  }\n  const formatDuration = seconds => {\n    const mins = Math.floor(seconds / 60);\n    return `${mins} min`;\n  };\n  const formatDate = dateString => {\n    return new Date(dateString).toLocaleDateString();\n  };\n  console.log('WalkingMap rendering with center:', center, 'coordinates:', allCoordinates.length);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"walking-map\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-debug\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Map should appear here - Center: \", center[0].toFixed(4), \", \", center[1].toFixed(4)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), allCoordinates.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uD83D\\uDCCD Enable GPS tracking to see your walking routes on the map!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: center,\n      zoom: 13,\n      style: {\n        height: '400px',\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), allTracks.map((session, index) => {\n        const track = session.gpsTrack;\n        const polylinePoints = track.map(coord => [coord.lat, coord.lng]);\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Polyline, {\n            positions: polylinePoints,\n            color: session.completed ? \"#4CAF50\" : \"#FF9800\",\n            weight: 3,\n            opacity: 0.7\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this), track.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Marker, {\n              position: [track[0].lat, track[0].lng],\n              children: /*#__PURE__*/_jsxDEV(Popup, {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Start\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 101,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 101,\n                    columnNumber: 47\n                  }, this), formatDate(session.date), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 102,\n                    columnNumber: 51\n                  }, this), \"Duration: \", formatDuration(session.duration), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 103,\n                    columnNumber: 69\n                  }, this), \"Status: \", session.completed ? 'Completed' : 'Incomplete']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 19\n            }, this), track.length > 1 && /*#__PURE__*/_jsxDEV(Marker, {\n              position: [track[track.length - 1].lat, track[track.length - 1].lng],\n              children: /*#__PURE__*/_jsxDEV(Popup, {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"End\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 114,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 114,\n                    columnNumber: 47\n                  }, this), formatDate(session.date), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 115,\n                    columnNumber: 53\n                  }, this), \"Duration: \", formatDuration(session.duration), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 116,\n                    columnNumber: 71\n                  }, this), \"Status: \", session.completed ? 'Completed' : 'Incomplete']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 113,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this);\n      }), isTracking && currentTrack.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Polyline, {\n          positions: currentTrack.map(coord => [coord.lat, coord.lng]),\n          color: \"#2196F3\",\n          weight: 4,\n          opacity: 0.8\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this), currentTrack.length > 0 && /*#__PURE__*/_jsxDEV(Marker, {\n          position: [currentTrack[currentTrack.length - 1].lat, currentTrack[currentTrack.length - 1].lng],\n          children: /*#__PURE__*/_jsxDEV(Popup, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Current Position\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 54\n              }, this), \"Live tracking active\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_c = WalkingMap;\nexport default WalkingMap;\nvar _c;\n$RefreshReg$(_c, \"WalkingMap\");","map":{"version":3,"names":["React","MapContainer","TileLayer","Polyline","Marker","Popup","L","jsxDEV","_jsxDEV","Fragment","_Fragment","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","WalkingMap","sessions","currentTrack","isTracking","allTracks","filter","session","gpsTrack","length","allCoordinates","flatMap","center","latitudes","map","coord","lat","longitudes","lng","Math","max","min","formatDuration","seconds","mins","floor","formatDate","dateString","Date","toLocaleDateString","console","log","className","children","toFixed","fileName","_jsxFileName","lineNumber","columnNumber","zoom","style","height","width","attribution","url","index","track","polylinePoints","positions","color","completed","weight","opacity","position","date","duration","_c","$RefreshReg$"],"sources":["/Users/stevegreen/code/walking-fitness-app/src/components/WalkingMap.tsx"],"sourcesContent":["import React from 'react';\nimport { MapContainer, TileLayer, Polyline, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\n// Fix for default markers in react-leaflet\ndelete (L.Icon.Default.prototype as any)._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',\n});\n\ninterface GPSCoordinate {\n  lat: number;\n  lng: number;\n  timestamp: number;\n}\n\ninterface WalkingSession {\n  date: string;\n  duration: number;\n  completed: boolean;\n  gpsTrack?: GPSCoordinate[];\n}\n\ninterface WalkingMapProps {\n  sessions: WalkingSession[];\n  currentTrack: GPSCoordinate[];\n  isTracking: boolean;\n}\n\nconst WalkingMap: React.FC<WalkingMapProps> = ({ sessions, currentTrack, isTracking }) => {\n  // Find all GPS tracks\n  const allTracks = sessions.filter(session => session.gpsTrack && session.gpsTrack.length > 0);\n  \n  // Calculate map center and zoom\n  const allCoordinates: GPSCoordinate[] = [\n    ...currentTrack,\n    ...allTracks.flatMap(session => session.gpsTrack || [])\n  ];\n\n  // Calculate center - use GPS data if available, otherwise default location\n  let center: [number, number] = [37.7749, -122.4194]; // Default to San Francisco\n  \n  if (allCoordinates.length > 0) {\n    const latitudes = allCoordinates.map(coord => coord.lat);\n    const longitudes = allCoordinates.map(coord => coord.lng);\n    center = [\n      (Math.max(...latitudes) + Math.min(...latitudes)) / 2,\n      (Math.max(...longitudes) + Math.min(...longitudes)) / 2\n    ];\n  }\n\n  const formatDuration = (seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    return `${mins} min`;\n  };\n\n  const formatDate = (dateString: string): string => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  console.log('WalkingMap rendering with center:', center, 'coordinates:', allCoordinates.length);\n\n  return (\n    <div className=\"walking-map\">\n      <div className=\"map-debug\">\n        <p>Map should appear here - Center: {center[0].toFixed(4)}, {center[1].toFixed(4)}</p>\n      </div>\n      {allCoordinates.length === 0 && (\n        <div className=\"map-overlay\">\n          <p>📍 Enable GPS tracking to see your walking routes on the map!</p>\n        </div>\n      )}\n      <MapContainer center={center} zoom={13} style={{ height: '400px', width: '100%' }}>\n        <TileLayer\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        \n        {/* Render completed walking sessions */}\n        {allTracks.map((session, index) => {\n          const track = session.gpsTrack!;\n          const polylinePoints: [number, number][] = track.map(coord => [coord.lat, coord.lng]);\n          \n          return (\n            <React.Fragment key={index}>\n              <Polyline\n                positions={polylinePoints}\n                color={session.completed ? \"#4CAF50\" : \"#FF9800\"}\n                weight={3}\n                opacity={0.7}\n              />\n              {track.length > 0 && (\n                <>\n                  {/* Start marker */}\n                  <Marker position={[track[0].lat, track[0].lng]}>\n                    <Popup>\n                      <div>\n                        <strong>Start</strong><br />\n                        {formatDate(session.date)}<br />\n                        Duration: {formatDuration(session.duration)}<br />\n                        Status: {session.completed ? 'Completed' : 'Incomplete'}\n                      </div>\n                    </Popup>\n                  </Marker>\n                  \n                  {/* End marker (if different from start) */}\n                  {track.length > 1 && (\n                    <Marker position={[track[track.length - 1].lat, track[track.length - 1].lng]}>\n                      <Popup>\n                        <div>\n                          <strong>End</strong><br />\n                          {formatDate(session.date)}<br />\n                          Duration: {formatDuration(session.duration)}<br />\n                          Status: {session.completed ? 'Completed' : 'Incomplete'}\n                        </div>\n                      </Popup>\n                    </Marker>\n                  )}\n                </>\n              )}\n            </React.Fragment>\n          );\n        })}\n        \n        {/* Render current active track */}\n        {isTracking && currentTrack.length > 0 && (\n          <>\n            <Polyline\n              positions={currentTrack.map(coord => [coord.lat, coord.lng])}\n              color=\"#2196F3\"\n              weight={4}\n              opacity={0.8}\n            />\n            \n            {/* Current position marker */}\n            {currentTrack.length > 0 && (\n              <Marker position={[\n                currentTrack[currentTrack.length - 1].lat, \n                currentTrack[currentTrack.length - 1].lng\n              ]}>\n                <Popup>\n                  <div>\n                    <strong>Current Position</strong><br />\n                    Live tracking active\n                  </div>\n                </Popup>\n              </Marker>\n            )}\n          </>\n        )}\n      </MapContainer>\n    </div>\n  );\n};\n\nexport default WalkingMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}