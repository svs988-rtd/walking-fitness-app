{"ast":null,"code":"import React from'react';import{MapContainer,TileLayer,Polyline,Marker,Popup,useMap}from'react-leaflet';import L from'leaflet';import'leaflet/dist/leaflet.css';// Fix for default markers in react-leaflet\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";delete L.Icon.Default.prototype._getIconUrl;L.Icon.Default.mergeOptions({iconRetinaUrl:'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png',iconUrl:'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png',shadowUrl:'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png'});// Hook to get user's current position\nconst useCurrentPosition=()=>{const[position,setPosition]=React.useState(null);const[error,setError]=React.useState(null);React.useEffect(()=>{if('geolocation'in navigator){navigator.geolocation.getCurrentPosition(pos=>{console.log('Got current position:',pos.coords.latitude,pos.coords.longitude);setPosition([pos.coords.latitude,pos.coords.longitude]);setError(null);},error=>{console.error('Geolocation error:',error);setError(error.message);},{enableHighAccuracy:true,timeout:10000,maximumAge:60000});}else{setError('Geolocation not supported');}},[]);return{position,error};};// Component to update map center when position changes\nconst MapCenterController=_ref=>{let{center}=_ref;const map=useMap();React.useEffect(()=>{map.setView(center,map.getZoom());},[map,center]);return null;};const WalkingMap=_ref2=>{let{sessions,currentTrack,isTracking}=_ref2;const{position:currentPosition,error:locationError}=useCurrentPosition();// Find all GPS tracks\nconst allTracks=sessions.filter(session=>session.gpsTrack&&session.gpsTrack.length>0);// Calculate map center and zoom\nconst allCoordinates=[...currentTrack,...allTracks.flatMap(session=>session.gpsTrack||[])];// Calculate center - priority: current tracking -> GPS history -> current location -> default\nlet center=[37.7749,-122.4194];// Default to San Francisco\nif(currentTrack.length>0){// If currently tracking, center on the most recent position\nconst latest=currentTrack[currentTrack.length-1];center=[latest.lat,latest.lng];}else if(allCoordinates.length>0){// If we have historical GPS data, center on that\nconst latitudes=allCoordinates.map(coord=>coord.lat);const longitudes=allCoordinates.map(coord=>coord.lng);center=[(Math.max(...latitudes)+Math.min(...latitudes))/2,(Math.max(...longitudes)+Math.min(...longitudes))/2];}else if(currentPosition){// Otherwise use current position if available\ncenter=currentPosition;}const formatDuration=seconds=>{const mins=Math.floor(seconds/60);return`${mins} min`;};const formatDate=dateString=>{return new Date(dateString).toLocaleDateString();};return/*#__PURE__*/_jsxs(\"div\",{className:\"walking-map\",children:[allCoordinates.length===0&&!currentPosition&&/*#__PURE__*/_jsxs(\"div\",{className:\"map-overlay\",children:[/*#__PURE__*/_jsx(\"p\",{children:\"\\uD83D\\uDCCD Enable GPS tracking to see your walking routes on the map!\"}),locationError&&/*#__PURE__*/_jsxs(\"p\",{style:{fontSize:'12px',color:'red'},children:[\"Location error: \",locationError]}),!locationError&&!currentPosition&&/*#__PURE__*/_jsx(\"p\",{style:{fontSize:'12px',color:'blue'},children:\"Detecting your location...\"})]}),/*#__PURE__*/_jsxs(MapContainer,{center:center,zoom:13,style:{height:'400px',width:'100%'},children:[/*#__PURE__*/_jsx(MapCenterController,{center:center}),/*#__PURE__*/_jsx(TileLayer,{attribution:\"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",url:\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"}),allTracks.map((session,index)=>{const track=session.gpsTrack;const polylinePoints=track.map(coord=>[coord.lat,coord.lng]);return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(Polyline,{positions:polylinePoints,color:session.completed?\"#4CAF50\":\"#FF9800\",weight:3,opacity:0.7}),track.length>0&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Marker,{position:[track[0].lat,track[0].lng],children:/*#__PURE__*/_jsx(Popup,{children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Start\"}),/*#__PURE__*/_jsx(\"br\",{}),formatDate(session.date),/*#__PURE__*/_jsx(\"br\",{}),\"Duration: \",formatDuration(session.duration),/*#__PURE__*/_jsx(\"br\",{}),\"Status: \",session.completed?'Completed':'Incomplete']})})}),track.length>1&&/*#__PURE__*/_jsx(Marker,{position:[track[track.length-1].lat,track[track.length-1].lng],children:/*#__PURE__*/_jsx(Popup,{children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"End\"}),/*#__PURE__*/_jsx(\"br\",{}),formatDate(session.date),/*#__PURE__*/_jsx(\"br\",{}),\"Duration: \",formatDuration(session.duration),/*#__PURE__*/_jsx(\"br\",{}),\"Status: \",session.completed?'Completed':'Incomplete']})})})]})]},index);}),isTracking&&currentTrack.length>0&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Polyline,{positions:currentTrack.map(coord=>[coord.lat,coord.lng]),color:\"#2196F3\",weight:4,opacity:0.8}),currentTrack.length>0&&/*#__PURE__*/_jsx(Marker,{position:[currentTrack[currentTrack.length-1].lat,currentTrack[currentTrack.length-1].lng],children:/*#__PURE__*/_jsx(Popup,{children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Current Position\"}),/*#__PURE__*/_jsx(\"br\",{}),\"Live tracking active\"]})})})]})]})]});};export default WalkingMap;","map":{"version":3,"names":["React","MapContainer","TileLayer","Polyline","Marker","Popup","useMap","L","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","useCurrentPosition","position","setPosition","useState","error","setError","useEffect","navigator","geolocation","getCurrentPosition","pos","console","log","coords","latitude","longitude","message","enableHighAccuracy","timeout","maximumAge","MapCenterController","_ref","center","map","setView","getZoom","WalkingMap","_ref2","sessions","currentTrack","isTracking","currentPosition","locationError","allTracks","filter","session","gpsTrack","length","allCoordinates","flatMap","latest","lat","lng","latitudes","coord","longitudes","Math","max","min","formatDuration","seconds","mins","floor","formatDate","dateString","Date","toLocaleDateString","className","children","style","fontSize","color","zoom","height","width","attribution","url","index","track","polylinePoints","positions","completed","weight","opacity","date","duration"],"sources":["/Users/stevegreen/code/walking-fitness-app/src/components/WalkingMap.tsx"],"sourcesContent":["import React from 'react';\nimport { MapContainer, TileLayer, Polyline, Marker, Popup, useMap } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\n// Fix for default markers in react-leaflet\ndelete (L.Icon.Default.prototype as any)._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',\n});\n\ninterface GPSCoordinate {\n  lat: number;\n  lng: number;\n  timestamp: number;\n}\n\ninterface WalkingSession {\n  date: string;\n  duration: number;\n  completed: boolean;\n  gpsTrack?: GPSCoordinate[];\n}\n\ninterface WalkingMapProps {\n  sessions: WalkingSession[];\n  currentTrack: GPSCoordinate[];\n  isTracking: boolean;\n}\n\n// Hook to get user's current position\nconst useCurrentPosition = () => {\n  const [position, setPosition] = React.useState<[number, number] | null>(null);\n  const [error, setError] = React.useState<string | null>(null);\n\n  React.useEffect(() => {\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(\n        (pos) => {\n          console.log('Got current position:', pos.coords.latitude, pos.coords.longitude);\n          setPosition([pos.coords.latitude, pos.coords.longitude]);\n          setError(null);\n        },\n        (error) => {\n          console.error('Geolocation error:', error);\n          setError(error.message);\n        },\n        { enableHighAccuracy: true, timeout: 10000, maximumAge: 60000 }\n      );\n    } else {\n      setError('Geolocation not supported');\n    }\n  }, []);\n\n  return { position, error };\n};\n\n// Component to update map center when position changes\nconst MapCenterController: React.FC<{ center: [number, number] }> = ({ center }) => {\n  const map = useMap();\n  \n  React.useEffect(() => {\n    map.setView(center, map.getZoom());\n  }, [map, center]);\n  \n  return null;\n};\n\nconst WalkingMap: React.FC<WalkingMapProps> = ({ sessions, currentTrack, isTracking }) => {\n  const { position: currentPosition, error: locationError } = useCurrentPosition();\n  \n  // Find all GPS tracks\n  const allTracks = sessions.filter(session => session.gpsTrack && session.gpsTrack.length > 0);\n  \n  // Calculate map center and zoom\n  const allCoordinates: GPSCoordinate[] = [\n    ...currentTrack,\n    ...allTracks.flatMap(session => session.gpsTrack || [])\n  ];\n\n  // Calculate center - priority: current tracking -> GPS history -> current location -> default\n  let center: [number, number] = [37.7749, -122.4194]; // Default to San Francisco\n  \n  if (currentTrack.length > 0) {\n    // If currently tracking, center on the most recent position\n    const latest = currentTrack[currentTrack.length - 1];\n    center = [latest.lat, latest.lng];\n  } else if (allCoordinates.length > 0) {\n    // If we have historical GPS data, center on that\n    const latitudes = allCoordinates.map(coord => coord.lat);\n    const longitudes = allCoordinates.map(coord => coord.lng);\n    center = [\n      (Math.max(...latitudes) + Math.min(...latitudes)) / 2,\n      (Math.max(...longitudes) + Math.min(...longitudes)) / 2\n    ];\n  } else if (currentPosition) {\n    // Otherwise use current position if available\n    center = currentPosition;\n  }\n\n  const formatDuration = (seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    return `${mins} min`;\n  };\n\n  const formatDate = (dateString: string): string => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  return (\n    <div className=\"walking-map\">\n      {allCoordinates.length === 0 && !currentPosition && (\n        <div className=\"map-overlay\">\n          <p>📍 Enable GPS tracking to see your walking routes on the map!</p>\n          {locationError && <p style={{fontSize: '12px', color: 'red'}}>Location error: {locationError}</p>}\n          {!locationError && !currentPosition && <p style={{fontSize: '12px', color: 'blue'}}>Detecting your location...</p>}\n        </div>\n      )}\n      <MapContainer center={center} zoom={13} style={{ height: '400px', width: '100%' }}>\n        <MapCenterController center={center} />\n        <TileLayer\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        \n        {/* Render completed walking sessions */}\n        {allTracks.map((session, index) => {\n          const track = session.gpsTrack!;\n          const polylinePoints: [number, number][] = track.map(coord => [coord.lat, coord.lng]);\n          \n          return (\n            <React.Fragment key={index}>\n              <Polyline\n                positions={polylinePoints}\n                color={session.completed ? \"#4CAF50\" : \"#FF9800\"}\n                weight={3}\n                opacity={0.7}\n              />\n              {track.length > 0 && (\n                <>\n                  {/* Start marker */}\n                  <Marker position={[track[0].lat, track[0].lng]}>\n                    <Popup>\n                      <div>\n                        <strong>Start</strong><br />\n                        {formatDate(session.date)}<br />\n                        Duration: {formatDuration(session.duration)}<br />\n                        Status: {session.completed ? 'Completed' : 'Incomplete'}\n                      </div>\n                    </Popup>\n                  </Marker>\n                  \n                  {/* End marker (if different from start) */}\n                  {track.length > 1 && (\n                    <Marker position={[track[track.length - 1].lat, track[track.length - 1].lng]}>\n                      <Popup>\n                        <div>\n                          <strong>End</strong><br />\n                          {formatDate(session.date)}<br />\n                          Duration: {formatDuration(session.duration)}<br />\n                          Status: {session.completed ? 'Completed' : 'Incomplete'}\n                        </div>\n                      </Popup>\n                    </Marker>\n                  )}\n                </>\n              )}\n            </React.Fragment>\n          );\n        })}\n        \n        {/* Render current active track */}\n        {isTracking && currentTrack.length > 0 && (\n          <>\n            <Polyline\n              positions={currentTrack.map(coord => [coord.lat, coord.lng])}\n              color=\"#2196F3\"\n              weight={4}\n              opacity={0.8}\n            />\n            \n            {/* Current position marker */}\n            {currentTrack.length > 0 && (\n              <Marker position={[\n                currentTrack[currentTrack.length - 1].lat, \n                currentTrack[currentTrack.length - 1].lng\n              ]}>\n                <Popup>\n                  <div>\n                    <strong>Current Position</strong><br />\n                    Live tracking active\n                  </div>\n                </Popup>\n              </Marker>\n            )}\n          </>\n        )}\n      </MapContainer>\n    </div>\n  );\n};\n\nexport default WalkingMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}