{"ast":null,"code":"export class ProgressionAlgorithm{// 80% completion rate\nstatic getRecommendation(sessions){if(sessions.length===0){return{recommendedDuration:this.MIN_DURATION,reason:\"Starting with a gentle 3-minute walk\",confidenceLevel:'high'};}const recentSessions=this.getRecentSessions(sessions,7);// Last 7 days\nconst lastSession=sessions[sessions.length-1];if(recentSessions.length<this.MIN_SESSIONS_FOR_PROGRESSION){return{recommendedDuration:lastSession.duration,reason:\"Continue with current duration to build consistency\",confidenceLevel:'medium'};}const completionRate=this.calculateCompletionRate(recentSessions);const consistency=this.calculateConsistency(recentSessions);const currentDuration=this.getMostCommonDuration(recentSessions);if(completionRate>=this.COMPLETION_THRESHOLD&&consistency>=0.7){const newDuration=Math.min(Math.round(currentDuration*(1+this.PROGRESSION_RATE)),this.MAX_DURATION);if(newDuration>currentDuration){return{recommendedDuration:newDuration,reason:`Great progress! Ready for ${this.formatDuration(newDuration)}`,confidenceLevel:'high'};}}if(completionRate<0.5){const newDuration=Math.max(Math.round(currentDuration*0.9),this.MIN_DURATION);return{recommendedDuration:newDuration,reason:\"Let's try a shorter duration to build confidence\",confidenceLevel:'medium'};}return{recommendedDuration:currentDuration,reason:\"Keep building consistency at this level\",confidenceLevel:'medium'};}static getRecentSessions(sessions,days){const cutoffDate=new Date();cutoffDate.setDate(cutoffDate.getDate()-days);return sessions.filter(session=>new Date(session.date)>=cutoffDate);}static calculateCompletionRate(sessions){if(sessions.length===0)return 0;const completed=sessions.filter(s=>s.completed).length;return completed/sessions.length;}static calculateConsistency(sessions){if(sessions.length===0)return 0;// Calculate how many of the last 7 days had walking sessions\nconst dates=sessions.map(s=>new Date(s.date).toDateString());const uniqueDates=new Set(dates);return uniqueDates.size/7;// Consistency over 7 days\n}static getMostCommonDuration(sessions){if(sessions.length===0)return this.MIN_DURATION;const durations=sessions.map(s=>s.duration);const frequency={};durations.forEach(duration=>{frequency[duration]=(frequency[duration]||0)+1;});return Number(Object.keys(frequency).reduce((a,b)=>frequency[Number(a)]>frequency[Number(b)]?a:b));}static formatDuration(seconds){const minutes=Math.floor(seconds/60);return`${minutes} minute${minutes!==1?'s':''}`;}static getProgressStats(sessions){const completed=sessions.filter(s=>s.completed);const totalTime=sessions.reduce((sum,s)=>sum+s.duration,0);const completedTime=completed.reduce((sum,s)=>sum+s.duration,0);return{totalSessions:sessions.length,completedSessions:completed.length,totalWalkingTime:totalTime,currentStreak:this.calculateCurrentStreak(sessions),averageDuration:completed.length>0?Math.round(completedTime/completed.length):0};}static calculateCurrentStreak(sessions){if(sessions.length===0)return 0;const sortedSessions=sessions.filter(s=>s.completed).sort((a,b)=>new Date(b.date).getTime()-new Date(a.date).getTime());let streak=0;let currentDate=new Date();currentDate.setHours(0,0,0,0);for(const session of sortedSessions){const sessionDate=new Date(session.date);sessionDate.setHours(0,0,0,0);const daysDiff=Math.floor((currentDate.getTime()-sessionDate.getTime())/(1000*60*60*24));if(daysDiff===streak){streak++;}else if(daysDiff===streak+1){// Allow for missing yesterday if we're checking today\nstreak++;}else{break;}currentDate=sessionDate;}return streak;}}ProgressionAlgorithm.MIN_DURATION=180;// 3 minutes\nProgressionAlgorithm.MAX_DURATION=1800;// 30 minutes\nProgressionAlgorithm.PROGRESSION_RATE=0.1;// 10% increase\nProgressionAlgorithm.MIN_SESSIONS_FOR_PROGRESSION=3;ProgressionAlgorithm.COMPLETION_THRESHOLD=0.8;","map":{"version":3,"names":["ProgressionAlgorithm","getRecommendation","sessions","length","recommendedDuration","MIN_DURATION","reason","confidenceLevel","recentSessions","getRecentSessions","lastSession","MIN_SESSIONS_FOR_PROGRESSION","duration","completionRate","calculateCompletionRate","consistency","calculateConsistency","currentDuration","getMostCommonDuration","COMPLETION_THRESHOLD","newDuration","Math","min","round","PROGRESSION_RATE","MAX_DURATION","formatDuration","max","days","cutoffDate","Date","setDate","getDate","filter","session","date","completed","s","dates","map","toDateString","uniqueDates","Set","size","durations","frequency","forEach","Number","Object","keys","reduce","a","b","seconds","minutes","floor","getProgressStats","totalTime","sum","completedTime","totalSessions","completedSessions","totalWalkingTime","currentStreak","calculateCurrentStreak","averageDuration","sortedSessions","sort","getTime","streak","currentDate","setHours","sessionDate","daysDiff"],"sources":["/Users/stevegreen/code/walking-fitness-app/src/utils/progressionAlgorithm.ts"],"sourcesContent":["interface WalkingSession {\n  date: string;\n  duration: number;\n  completed: boolean;\n}\n\ninterface ProgressionRecommendation {\n  recommendedDuration: number;\n  reason: string;\n  confidenceLevel: 'low' | 'medium' | 'high';\n}\n\nexport class ProgressionAlgorithm {\n  private static readonly MIN_DURATION = 180; // 3 minutes\n  private static readonly MAX_DURATION = 1800; // 30 minutes\n  private static readonly PROGRESSION_RATE = 0.1; // 10% increase\n  private static readonly MIN_SESSIONS_FOR_PROGRESSION = 3;\n  private static readonly COMPLETION_THRESHOLD = 0.8; // 80% completion rate\n\n  static getRecommendation(sessions: WalkingSession[]): ProgressionRecommendation {\n    if (sessions.length === 0) {\n      return {\n        recommendedDuration: this.MIN_DURATION,\n        reason: \"Starting with a gentle 3-minute walk\",\n        confidenceLevel: 'high'\n      };\n    }\n\n    const recentSessions = this.getRecentSessions(sessions, 7); // Last 7 days\n    const lastSession = sessions[sessions.length - 1];\n    \n    if (recentSessions.length < this.MIN_SESSIONS_FOR_PROGRESSION) {\n      return {\n        recommendedDuration: lastSession.duration,\n        reason: \"Continue with current duration to build consistency\",\n        confidenceLevel: 'medium'\n      };\n    }\n\n    const completionRate = this.calculateCompletionRate(recentSessions);\n    const consistency = this.calculateConsistency(recentSessions);\n    const currentDuration = this.getMostCommonDuration(recentSessions);\n\n    if (completionRate >= this.COMPLETION_THRESHOLD && consistency >= 0.7) {\n      const newDuration = Math.min(\n        Math.round(currentDuration * (1 + this.PROGRESSION_RATE)),\n        this.MAX_DURATION\n      );\n      \n      if (newDuration > currentDuration) {\n        return {\n          recommendedDuration: newDuration,\n          reason: `Great progress! Ready for ${this.formatDuration(newDuration)}`,\n          confidenceLevel: 'high'\n        };\n      }\n    }\n\n    if (completionRate < 0.5) {\n      const newDuration = Math.max(\n        Math.round(currentDuration * 0.9),\n        this.MIN_DURATION\n      );\n      \n      return {\n        recommendedDuration: newDuration,\n        reason: \"Let's try a shorter duration to build confidence\",\n        confidenceLevel: 'medium'\n      };\n    }\n\n    return {\n      recommendedDuration: currentDuration,\n      reason: \"Keep building consistency at this level\",\n      confidenceLevel: 'medium'\n    };\n  }\n\n  private static getRecentSessions(sessions: WalkingSession[], days: number): WalkingSession[] {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - days);\n    \n    return sessions.filter(session => new Date(session.date) >= cutoffDate);\n  }\n\n  private static calculateCompletionRate(sessions: WalkingSession[]): number {\n    if (sessions.length === 0) return 0;\n    const completed = sessions.filter(s => s.completed).length;\n    return completed / sessions.length;\n  }\n\n  private static calculateConsistency(sessions: WalkingSession[]): number {\n    if (sessions.length === 0) return 0;\n    \n    // Calculate how many of the last 7 days had walking sessions\n    const dates = sessions.map(s => new Date(s.date).toDateString());\n    const uniqueDates = new Set(dates);\n    \n    return uniqueDates.size / 7; // Consistency over 7 days\n  }\n\n  private static getMostCommonDuration(sessions: WalkingSession[]): number {\n    if (sessions.length === 0) return this.MIN_DURATION;\n    \n    const durations = sessions.map(s => s.duration);\n    const frequency: { [key: number]: number } = {};\n    \n    durations.forEach(duration => {\n      frequency[duration] = (frequency[duration] || 0) + 1;\n    });\n    \n    return Number(Object.keys(frequency).reduce((a, b) => \n      frequency[Number(a)] > frequency[Number(b)] ? a : b\n    ));\n  }\n\n  private static formatDuration(seconds: number): string {\n    const minutes = Math.floor(seconds / 60);\n    return `${minutes} minute${minutes !== 1 ? 's' : ''}`;\n  }\n\n  static getProgressStats(sessions: WalkingSession[]): {\n    totalSessions: number;\n    completedSessions: number;\n    totalWalkingTime: number;\n    currentStreak: number;\n    averageDuration: number;\n  } {\n    const completed = sessions.filter(s => s.completed);\n    const totalTime = sessions.reduce((sum, s) => sum + s.duration, 0);\n    const completedTime = completed.reduce((sum, s) => sum + s.duration, 0);\n    \n    return {\n      totalSessions: sessions.length,\n      completedSessions: completed.length,\n      totalWalkingTime: totalTime,\n      currentStreak: this.calculateCurrentStreak(sessions),\n      averageDuration: completed.length > 0 ? Math.round(completedTime / completed.length) : 0\n    };\n  }\n\n  private static calculateCurrentStreak(sessions: WalkingSession[]): number {\n    if (sessions.length === 0) return 0;\n    \n    const sortedSessions = sessions\n      .filter(s => s.completed)\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n    \n    let streak = 0;\n    let currentDate = new Date();\n    currentDate.setHours(0, 0, 0, 0);\n    \n    for (const session of sortedSessions) {\n      const sessionDate = new Date(session.date);\n      sessionDate.setHours(0, 0, 0, 0);\n      \n      const daysDiff = Math.floor((currentDate.getTime() - sessionDate.getTime()) / (1000 * 60 * 60 * 24));\n      \n      if (daysDiff === streak) {\n        streak++;\n      } else if (daysDiff === streak + 1) {\n        // Allow for missing yesterday if we're checking today\n        streak++;\n      } else {\n        break;\n      }\n      \n      currentDate = sessionDate;\n    }\n    \n    return streak;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}